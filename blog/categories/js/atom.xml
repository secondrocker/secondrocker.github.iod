<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Js | elephant]]></title>
  <link href="http://secondrocker.github.io/blog/categories/js/atom.xml" rel="self"/>
  <link href="http://secondrocker.github.io/"/>
  <updated>2015-03-18T20:36:45+08:00</updated>
  <id>http://secondrocker.github.io/</id>
  <author>
    <name><![CDATA[secondrocker]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Constructor &amp;&amp; Prototype]]></title>
    <link href="http://secondrocker.github.io/blog/2015/03/18/constructor-and-and-prototype/"/>
    <updated>2015-03-18T16:42:25+08:00</updated>
    <id>http://secondrocker.github.io/blog/2015/03/18/constructor-and-and-prototype</id>
    <content type="html"><![CDATA[<p>每个对象都是个散列表
每个原型都有相关连的函数,每个函数都有相关联的原型</p>

<pre><code class="js">var A = function(){};
var p = A.prototype ;
var c = p.constructor;
A==c
</code></pre>

<p>函数的对象的constructor就是该函数（未修改prototype）
<code>js
function A() {
}
var a = new A();
a.constructor == A
</code>
修改函数的prototype后其对象的constructor为新的prototype的constructor
<code>js
function A(){};
function B(){};
A.prototype = new B();
console.log((new A()).constructor); //为function B(){}
A.prototype.constructor = A;
console.log((new A()).constructor);//为function A(){}
</code>
{}(对象直接量)对象是function Object(){}的对象</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coffeescript的=>]]></title>
    <link href="http://secondrocker.github.io/blog/2014/08/27/coffeescriptde-equals-%3E/"/>
    <updated>2014-08-27T16:05:54+08:00</updated>
    <id>http://secondrocker.github.io/blog/2014/08/27/coffeescriptde-equals-></id>
    <content type="html"><![CDATA[<p>瘦箭头 ->用于 function创建
<code>coffeescript
$("#login").click -&gt;
  alert("ca")
</code>
胖箭头=>把 this作为参数代入function
在function中使用this 为外部定义function的this，起到作用域转移的作用
<code>coffeescript
user_id="nidaye"
ele.addEventListener "click",(e)=&gt;
  alert(this.user_id)
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Js闭包]]></title>
    <link href="http://secondrocker.github.io/blog/2014/08/08/jsbi-bao/"/>
    <updated>2014-08-08T10:58:57+08:00</updated>
    <id>http://secondrocker.github.io/blog/2014/08/08/jsbi-bao</id>
    <content type="html"><![CDATA[<p>创建一个对象时如果该对象用到某个内部作用域的变量，那么对这个内部作用域创建一个闭包</p>

<p>eg
<code>javascript
function a(){
  var n=0;
  addN=function(){
    n+=1;
    console.log(n);
  };
  return addN;
}
x=a();     //创建一个闭包
x();       //输出1
x();       //输出2
y=a();     //创建另一个闭包
y();       //输出1
</code></p>
]]></content>
  </entry>
  
</feed>
