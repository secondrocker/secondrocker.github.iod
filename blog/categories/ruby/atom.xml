<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | elephant]]></title>
  <link href="http://secondrocker.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://secondrocker.github.io/"/>
  <updated>2015-03-18T16:43:23+08:00</updated>
  <id>http://secondrocker.github.io/</id>
  <author>
    <name><![CDATA[Secondrocker]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ruby元编程1]]></title>
    <link href="http://secondrocker.github.io/blog/2014/08/08/rubyyuan-bian-cheng-1/"/>
    <updated>2014-08-08T10:59:50+08:00</updated>
    <id>http://secondrocker.github.io/blog/2014/08/08/rubyyuan-bian-cheng-1</id>
    <content type="html"><![CDATA[<h1>ruby元编程之eigenclass</h1>

<pre><code class="ruby">class BasicObject
  def self.eigenclass
    class &lt;&lt; self
      self
    end
  end
  def eigenclass
    class &lt;&lt; self
      self
    end
  end
end

class A
  def self.haha
    "ah"
  end
end

class B &lt; A
end

#对象eigenclass的superclass就是对象的类
b=B.new
p b.eigenclass.superclass == B
#类的eigenclass的superclass是类超类的eigenclass
p B.eigenclass.superclass == B.superclass.eigenclass
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RSPEC学习1]]></title>
    <link href="http://secondrocker.github.io/blog/2014/08/08/rspecxue-xi-1/"/>
    <updated>2014-08-08T09:48:01+08:00</updated>
    <id>http://secondrocker.github.io/blog/2014/08/08/rspecxue-xi-1</id>
    <content type="html"><![CDATA[<p>rails 安装 rspec
- gem &lsquo;rspec-rails&rsquo;</p>

<p>创建rspec配置文件
- rails g rspec:install</p>

<p>should与should_not
- 对象如有valid?之类的方法，test可这么写model.should be_valid或model.should_not be_valid
- model.should == xx  <strong>等同</strong> model.should eq xx</p>

<p>expect
- expect(model).to eq  some_thing</p>

<p>let与before
- let与before(:each)的一个区别是before可以初始化变量,let不能before可以这样
<code>ruby
before(:each) do
    king="亚历山大"
end
</code>
- before(:each) 每个测试相互独立，分别调用这个
- before(:all)只调用这个一次
- let可用于定义变量，如下，在测试用例中可使用 king_of_zombie变量
<code>ruby
  let(:king_of_zombie) do
    "邓肯"
  end
</code>
Load RSpec 2.x support by adding the following line (typically to your spec_helper.rb file):
require &lsquo;capybara/rspec&rsquo;
If you are using Rails, put your Capybara specs in spec/features.
If you are not using Rails, tag all the example groups in which you want to use Capybara with :type => :feature.
You can now write your specs like so:
describe &ldquo;the signin process&rdquo;, :type => :feature do
  before :each do
    User.make(:email => &lsquo;<a href="&#109;&#97;&#105;&#x6c;&#116;&#x6f;&#58;&#117;&#x73;&#101;&#114;&#64;&#101;&#120;&#x61;&#x6d;&#x70;&#108;&#101;&#x2e;&#99;&#111;&#x6d;">&#117;&#115;&#101;&#114;&#x40;&#101;&#x78;&#97;&#109;&#x70;&#108;&#101;&#x2e;&#99;&#111;&#109;</a>&rsquo;, :password => &lsquo;caplin&rsquo;)
  end
<code>ruby
  it "signs me in" do
    visit '/sessions/new'
    within("#session") do
      fill_in 'Login', :with =&gt; 'user@example.com'
      fill_in 'Password', :with =&gt; 'password'
    end
    click_link 'Sign in'
    expect(page).to have_content 'Success'
  end
end
</code>
<a href="http://rubydoc.info/gems/rspec-rails/file/Capybara.md">http://rubydoc.info/gems/rspec-rails/file/Capybara.md</a>
<a href="https://github.com/rspec/rspec-rails">https://github.com/rspec/rspec-rails</a></p>

<p>Many users have been confused by the co-existence of the the Capybara::DSL (visit/page) alongside the rack-test DSL (get|post|put|delete|head/response.body) in examples in spec/requests and spec/controllers. As of rspec-rails-2.11.1 and capybara-2.0.0.beta2, these are separated as follows:</p>

<p>Capybara::DSL is included
- spec/features</p>

<p>rack-test DSL is included in
- spec/requests and spec/controllers</p>

<p>Capybara::RSpecMatchers is added to examples in:
- spec/features
- spec/controllers
- spec/views
- spec/helpers
- spec/mailers</p>

<p>2012年6月,Rspec开发团队宣布,在v2.11中使用了新句法
来替代传统的should式句法,如
<code>ruby
it "is true when true" do
 true.should be_true
end
</code>
新句法会把要测试的值传递给 expect() 方法,然后和匹配器比较:
<code>ruby
it "is true when true" do
 expect(true).to be_true
end
</code></p>

<p>当有多个it &ldquo;xxxx&rdquo; do end 而测试的主题一致时，
可用
<code>ruby
subject{@object}
it { should eq xx}
it { should have_content("cccc")}
</code></p>
]]></content>
  </entry>
  
</feed>
